"""
info regarding the accountant approval process
"""
type AccountantApproval {
  approved: Boolean!
  remark: String
}

"""
input variables for updateCharge.AccountantApproval
"""
input AccountantApprovalInput {
  approved: Boolean!
  remark: String
}

"""
represent a single bank account
"""
type BankFinancialAccount implements FinancialAccount {
  """
  the external identifier of the bank account
  """
  accountNumber: String!
  bankNumber: String!
  branchNumber: String!
  charges(filter: ChargeFilter): [Charge!]!

  """
  country
  """
  country: String!

  """
  the external identifier of the bank account
  """
  iban: IBAN!
  id: ID!

  """
  the name of the bank account
  """
  name: String

  """
  calculate based on bank+branch
  """
  routingNumber: String!

  """
  swift
  """
  swift: String!
}

"""
defines a link between a counterparty and their part in the charge
"""
type BeneficiaryCounterparty {
  counterparty: Counterparty!
  percentage: Percentage!
}

"""
input variables for beneficiary
"""
input BeneficiaryInput {
  counterparty: CounterpartyInput!
  percentage: Percentage!
}

"""
represent every kind of invoice document
"""
union BroadInvoice = Invoice | InvoiceReceipt

"""
represent every kind of receipt document
"""
union BroadReceipt = InvoiceReceipt | Receipt

"""
represent a business trip
"""
type BusinessTrip {
  dates: DateRange!
  id: ID!
  name: String!
}

"""
represent a single credit card
"""
type CardFinancialAccount implements FinancialAccount {
  charges(filter: ChargeFilter): [Charge!]!
  fourDigits: String!
  id: ID!

  """
  the external identifier of the card
  """
  number: String!
}

"""
represrent a complex type for grouped charge with ledger info, bank/card transactions and documents
"""
type Charge {
  accountantApproval: AccountantApproval!

  """
  additional documents attached to the charge
  """
  additionalDocuments: [Document!]!

  """
  a list of beneficiaries and their part in the charge
  """
  beneficiaries: [BeneficiaryCounterparty!]!

  """
  should be later in busines trip module?
  """
  businessTrip: BusinessTrip

  """
  calculated counterparty details for the charge
  """
  counterparty: Counterparty

  """
  when the initial charge was created from the first event we found
  """
  createdAt: Date!

  """
  user description, set manually by the user
  """
  description: String
  id: ID!

  """
  linked invoice document
  """
  invoice: BroadInvoice

  """
  ledger records linked to the charge
  """
  ledgerRecords: [LedgerRecord!]!

  """
  פחת, ציוד
  """
  property: Boolean

  """
  linked receipt document
  """
  receipt: BroadReceipt

  """
  user customer tags
  """
  tags: [Tag!]!

  """
  the total amount of the charge
  """
  totalAmount: FinancialAmount

  """
  list of financial/bank transactions linked to the charge
  """
  transactions: [Transaction!]!

  """
  calculated field based on the actual ledger records, optional because not all charges has VAT
  """
  vat: FinancialAmount

  """
  withholding tax
  """
  withholdingTax: FinancialAmount
}

"""
input variables for charge filtering
"""
input ChargeFilter {
  """
  filter by business trip (should be later in busines trip module?)
  """
  businessTrip: ID

  """
  Include only charges occured after this date
  """
  fromDate: String

  """
  Include only charges occured before this date
  """
  toDate: String

  """
  Include only charges that doesn't have documents linked
  """
  withoutDocuments: Boolean

  """
  Include only charges that doesn't have invoice document linked
  """
  withoutInvoice: Boolean

  """
  Include only charges that doesn't have Ledger records linked
  """
  withoutLedger: Boolean

  """
  Include only charges that doesn't have transactions linked
  """
  withoutTransaction: Boolean
}

"""
common type of errors
"""
type CommonError implements Error {
  message: String!
}

"""
temp type until DB  supports transactions differenciation
"""
type CommonTransaction implements Transaction {
  account: FinancialAccount!
  accountantApproval: AccountantApproval!
  amount: FinancialAmount!
  balance: FinancialAmount!
  createdAt: Date!
  description: String!
  direction: TransactionDirection!
  effectiveDate: TimelessDate
  hashavshevetId: Int
  id: ID!
  referenceNumber: String!
  userNote: String
}

"""
המרה
"""
type ConversionTransaction implements Transaction {
  account: FinancialAccount!
  accountantApproval: AccountantApproval!
  amount: FinancialAmount!
  balance: FinancialAmount!

  """
  המרה של הבנק
  """
  bankRate: Rate!
  createdAt: Date!
  description: String!
  direction: TransactionDirection!
  effectiveDate: TimelessDate!
  from: Currency!
  hashavshevetId: Int
  id: ID!

  """
  בנק ישראל
  """
  officialRate: Rate
  referenceNumber: String!
  to: Currency!
  userNote: String
}

"""
The other side of a transaction
"""
interface Counterparty {
  name: String!
}

"""
input variables for updateCharge.Counterparty
"""
input CounterpartyInput {
  name: String!
}

"""
All possible currencies
"""
enum Currency {
  EUR
  GBP
  ILS
  USD
}

"""
Date
"""
scalar Date

"""
a date range
"""
type DateRange {
  end: TimelessDate!
  start: TimelessDate!
}

"""
represent a generic document with identifier and a URL
"""
interface Document implements Linkable {
  charge: Charge
  creditor: String
  debtor: String

  """
  the specific type of the document
  """
  documentType: DocumentType

  """
  link to original file gmail, pdf
  """
  file: URL
  id: ID!

  """
  previewable image
  """
  image: URL
  isReviewed: Boolean
}

"""
All possible document types
"""
enum DocumentType {
  INVOICE
  INVOICE_RECEIPT
  PROFORMA
  RECEIPT
  UNPROCESSED
}

"""
basic structure of error
"""
interface Error {
  message: String!
}

"""
עמלה
"""
type FeeTransaction implements Transaction {
  account: FinancialAccount!
  accountantApproval: AccountantApproval!
  amount: FinancialAmount!
  balance: FinancialAmount!
  createdAt: Date!
  description: String!
  direction: TransactionDirection!
  effectiveDate: TimelessDate!
  hashavshevetId: Int
  id: ID!
  referenceNumber: String!
  userNote: String
}

"""
Represent something external that we scrape, like bank or card
"""
interface FinancialAccount {
  charges(filter: ChargeFilter): [Charge!]!
  id: ID!
}

"""
Represent financial amount
"""
type FinancialAmount {
  """
  currency of the amount
  """
  currency: Currency!

  """
  formatted value with the currency symbol, like: 10$
  """
  formatted: String!

  """
  the raw amount, for example: 19.99
  """
  raw: Float!
}

"""
input variables for updateCharge.FinancialAmount
"""
input FinancialAmountInput {
  currency: Currency!
  raw: Float!
}

"""
represent a financial entity of any type that may hold financial accounts (company, business, individual)
"""
interface FinancialEntity {
  accounts: [FinancialAccount!]!
  charges(filter: ChargeFilter): [Charge!]!
  documents: [Document]
  id: ID!
  linkedEntities: [FinancialEntity!]!
}

"""
result type for generateLedgerRecords
"""
union GenerateLedgerRecordsResult = Charge | CommonError

"""
IBAN
"""
scalar IBAN

"""
input variables for insertDocument
"""
input InsertDocumentInput {
  amount: FinancialAmountInput
  chargeId: ID
  creditor: String
  date: TimelessDate
  debtor: String
  documentType: DocumentType
  file: URL
  image: URL
  serialNumber: String
  vat: FinancialAmountInput
}

"""
result type for insertDocument
"""
union InsertDocumentResult = CommonError | InsertDocumentSuccessfulResult

"""
result type for insertDocument
"""
type InsertDocumentSuccessfulResult {
  document: Document
}

"""
input variables for insertLedgerRecord
"""
input InsertLedgerRecordInput {
  accountantApproval: AccountantApprovalInput
  creditAccount: CounterpartyInput
  date: TimelessDate
  date3: TimelessDate
  debitAccount: CounterpartyInput
  description: String
  hashavshevetId: Int

  """
  in shekels at the moment
  """
  localCurrencyAmount: FinancialAmountInput
  originalAmount: FinancialAmountInput
  valueDate: TimelessDate
}

"""
result type for insertLedgerRecord
"""
union InsertLedgerRecordResult = Charge | CommonError

"""
invoice document
"""
type Invoice implements Document & Linkable {
  amount: FinancialAmount
  charge: Charge
  creditor: String
  date: TimelessDate
  debtor: String
  documentType: DocumentType
  file: URL
  id: ID!
  image: URL
  isReviewed: Boolean
  serialNumber: String
  vat: FinancialAmount
}

"""
Invoice receipt document - חשבונית מס קבלה
"""
type InvoiceReceipt implements Document & Linkable {
  amount: FinancialAmount
  charge: Charge
  creditor: String
  date: TimelessDate
  debtor: String
  documentType: DocumentType
  file: URL
  id: ID!
  image: URL
  isReviewed: Boolean
  serialNumber: String
  vat: FinancialAmount
}

"""
represent atomic movement of funds
"""
type LedgerRecord {
  accountantApproval: AccountantApproval!
  creditAccount: Counterparty
  date: TimelessDate!
  debitAccount: Counterparty
  description: String!
  hashavshevetId: Int
  id: ID!

  """
  in shekels at the moment
  """
  localCurrencyAmount: FinancialAmount!
  originalAmount: FinancialAmount!
}

"""
represent a link to an external file
"""
interface Linkable {
  file: URL
}

"""
Financial entity, identifier by ID, can be a company or individual
"""
type LtdFinancialEntity implements FinancialEntity {
  accounts: [FinancialAccount!]!
  address: String!
  charges(filter: ChargeFilter): [Charge!]!
  documents: [Document]
  email: String
  englishName: String
  govermentId: String!
  id: ID!
  linkedEntities: [FinancialEntity!]!
  name: String!
  phoneNumber: String
  website: String
}

"""
mutation root
"""
type Mutation {
  deleteDocument(documentId: ID!): Boolean!
  generateLedgerRecords(chargeId: ID!): GenerateLedgerRecordsResult!
  insertDocument(record: InsertDocumentInput!): InsertDocumentResult!
  insertLedgerRecord(chargeId: ID!, record: InsertLedgerRecordInput!): InsertLedgerRecordResult!
  ping: Boolean
  updateCharge(chargeId: ID!, fields: UpdateChargeInput!): UpdateChargeResult!
  updateDocument(documentId: ID!, fields: UpdateDocumentFieldsInput!): UpdateDocumentResult!
  updateLedgerRecord(fields: UpdateLedgerRecordInput!, ledgerRecordId: ID!): UpdateLedgerRecordResult!
  updateTransaction(fields: UpdateTransactionInput!, transactionId: ID!): UpdateTransactionResult!
}

"""
represent a counterparty with a name
"""
type NamedCounterparty implements Counterparty {
  name: String!
}

"""
node interface
"""
interface Node {
  id: ID!
}

"""
Percentage
"""
scalar Percentage

"""
Financial entity, identifier by ID, represents an actual person
"""
type PersonalFinancialEntity implements FinancialEntity {
  accounts: [FinancialAccount!]!
  charges(filter: ChargeFilter): [Charge!]!
  documents: [Document]
  email: String!
  id: ID!
  linkedEntities: [FinancialEntity!]!
  name: String!
}

"""
proforma document
"""
type Proforma implements Document & Linkable {
  amount: FinancialAmount
  charge: Charge
  creditor: String
  date: TimelessDate
  debtor: String
  documentType: DocumentType
  file: URL
  id: ID!
  image: URL
  isReviewed: Boolean
  serialNumber: String
  vat: FinancialAmount
}

"""
query root
"""
type Query {
  chargeById(id: ID!): Charge!
  documents: [Document!]!
  financialEntity(id: ID!): FinancialEntity!
  node(id: ID!): Node
}

"""
Rate
"""
scalar Rate

"""
receipt document
"""
type Receipt implements Document & Linkable {
  amount: FinancialAmount
  charge: Charge
  creditor: String
  date: TimelessDate
  debtor: String
  documentType: DocumentType

  """
  gmail, pdf
  """
  file: URL
  id: ID!

  """
  previewable image
  """
  image: URL
  invoice: Invoice
  isReviewed: Boolean
  serialNumber: String
  vat: FinancialAmount
}

"""
defines a tag / category for charge arrangement
"""
type Tag {
  name: String!
}

"""
input variables for Tag
"""
input TagInput {
  name: String!
}

"""
Date with no time of day
"""
scalar TimelessDate

"""
Represent a general transaction object
"""
interface Transaction {
  """
  link to the account
  """
  account: FinancialAccount!
  accountantApproval: AccountantApproval!

  """
  the amount of the transaction
  """
  amount: FinancialAmount!

  """
  effective bank / card balance, after the transaction
  """
  balance: FinancialAmount!

  """
  eventDate
  """
  createdAt: Date!

  """
  description of the transaction, as defined by the bank/card
  """
  description: String!

  """
  either credit or debit
  """
  direction: TransactionDirection!

  """
  debitDate
  """
  effectiveDate: TimelessDate
  hashavshevetId: Int
  id: ID!

  """
  external key / identifier in the bank or card (אסמכתא)
  """
  referenceNumber: String!

  """
  user custom note, saved by the bank
  """
  userNote: String
}

"""
The direction of the transaction
"""
enum TransactionDirection {
  CREDIT
  DEBIT
}

"""
URL
"""
scalar URL

"""
document that haven't yet been processed
"""
type Unprocessed implements Document & Linkable {
  charge: Charge
  creditor: String
  debtor: String
  documentType: DocumentType
  file: URL
  id: ID!
  image: URL
  isReviewed: Boolean
}

"""
input variables for updateCharge
"""
input UpdateChargeInput {
  accountantApproval: AccountantApprovalInput
  beneficiaries: [BeneficiaryInput!]
  counterparty: CounterpartyInput
  isProperty: Boolean
  tags: [TagInput!]
  totalAmount: FinancialAmountInput
  vat: Float
  withholdingTax: Float
}

"""
result type for updateCharge
"""
union UpdateChargeResult = Charge | CommonError

"""
input variables for updateDocument
"""
input UpdateDocumentFieldsInput {
  amount: FinancialAmountInput
  chargeId: ID
  creditor: String
  date: TimelessDate
  debtor: String
  documentType: DocumentType
  file: URL
  image: URL
  serialNumber: String
  vat: FinancialAmountInput
}

"""
result type for updateCharge
"""
union UpdateDocumentResult = CommonError | UpdateDocumentSuccessfulResult

"""
result type for updateDocument
"""
type UpdateDocumentSuccessfulResult {
  document: Document
}

"""
input variables for updateLedgerRecord
"""
input UpdateLedgerRecordInput {
  accountantApproval: AccountantApprovalInput
  creditAccount: CounterpartyInput
  date: TimelessDate
  debitAccount: CounterpartyInput
  description: String
  hashavshevetId: Int

  """
  in shekels at the moment
  """
  localCurrencyAmount: FinancialAmountInput
  originalAmount: FinancialAmountInput
}

"""
result type for updateLedgerRecord
"""
union UpdateLedgerRecordResult = CommonError | LedgerRecord

"""
input variables for updateTransaction
"""
input UpdateTransactionInput {
  accountantApproval: AccountantApprovalInput
  amount: FinancialAmountInput
  balance: FinancialAmountInput
  effectiveDate: TimelessDate
  hashavshevetId: Int
  referenceNumber: String
  userNote: String
}

"""
result type for updateTransaction
"""
union UpdateTransactionResult = CommonError | CommonTransaction

"""
העברה
"""
type WireTransaction implements Transaction {
  account: FinancialAccount!
  accountantApproval: AccountantApproval!
  amount: FinancialAmount!
  balance: FinancialAmount!
  createdAt: Date!
  description: String!
  direction: TransactionDirection!
  effectiveDate: TimelessDate!
  hashavshevetId: Int
  id: ID!
  referenceNumber: String!
  userNote: String
}
